/*
 ============================================================================
 Name        : Merge_Sort_wo_recursion.c
 Author      : Sin
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

#define MIN(x,y) ((x)<(y) ? (x) : (y))

void MergeSort(int a[], unsigned int n);

int main(int argc, char * argv[]) {
	unsigned int input_size = 0;

	if (argc < 2) {
		puts("Too few arguments.\n");
		return EXIT_FAILURE;
	}

	printf("argc = %d.\n", argc);
	for(int i = 1; i < argc; i++) {
		input_size++;
	}

	printf("input size: %d.\n", input_size);

	int array[input_size];
	for(unsigned int i = 0; i < input_size; i++) {
		array[i] = atoi(argv[1+i]);
	}

	printf("Array contents: \n");
	for(unsigned int i = 0; i < input_size; i++) {
		printf("%d, ", array[i]);
	}
	printf("\n");
	printf("sorting...\n");

	MergeSort(array, input_size);

	printf("Array contents: \n");
	for(unsigned int i = 0; i < input_size; i++) {
		printf("%d, ", array[i]);
	}
	printf("\n");

	return EXIT_SUCCESS;
}

void MergeSort(int a[], unsigned int n) {
	int tmp[n];
	unsigned int length, start, left, right, dst, lend, rend;

	length = 1; // the length of merging sequences
	while (length < n) {
		start = 0; // the position of a pair of two sequences
		while (start < n) {
			dst = 0; // the index of a merge buffer
			left = start;
			right = start + length;
			lend = MIN(start + length, n);
			rend = MIN(start + 2 * length, n);
			do {
				if ( (left < lend) && (right < rend) ) {
					if ( a[left] < a[right] ) {
						tmp[dst++] = a[left++];
					} else {
						tmp[dst++] = a[right++];
					}
				} else if ( left < lend ) {
					tmp[dst++] = a[left++];
				} else if ( right < rend ) {
					tmp[dst++] = a[right++];
				} else {
					break; // finished merging
				}
			} while (1);

			// copy back
			for(int i = 0; i < dst; i++) {
				a[start + i] = tmp[i];
			}

			start += 2*length;
		}

		/* for observation */
		printf("\nstage: length = %d\n", length);
		for(unsigned int i = 0; i < n; i++) {
			if ( i % (2*length) == 0 ) printf(": ");
			printf("%d, ", a[i]);
		}
		printf("\n");
		/* */

		length = 2 * length;
	}

}

/*
 *
argc = 11.
input size: 10.
Array contents:
3, 1, 7, 9, 10, 2, 6, 7, 3, 5,
sorting...
Array contents:
1, 2, 3, 3, 5, 6, 7, 7, 9, 10,

 */
